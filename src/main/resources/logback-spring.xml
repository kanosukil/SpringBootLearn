<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
                 当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration  scan="true" scanPeriod="10 seconds">
    <contextName>logback</contextName>

    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后，可以使“${}”来使用变量。 -->
    <property name="log.path" value="./logs" />

    <!--0. 日志格式和颜色渲染 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--1. 输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--2. 输出到文档-->
    <!-- 2.1 level为 DEBUG 日志，时间滚动输出  -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${log.path}/web_debug.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${log.path}/web-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>3</maxHistory>
        </rollingPolicy>
        <!-- 此日志文档只记录debug级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 2.2 level为 INFO 日志，时间滚动输出  -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${log.path}/web_info.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${log.path}/web-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>3</maxHistory>
        </rollingPolicy>
        <!-- 此日志文档只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 2.3 level为 WARN 日志，时间滚动输出  -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${log.path}/web_warn.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/web-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>3</maxHistory>
        </rollingPolicy>
        <!-- 此日志文档只记录warn级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 2.4 level为 ERROR 日志，时间滚动输出  -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${log.path}/web_error.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/web-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>3</maxHistory>
        </rollingPolicy>
        <!-- 此日志文档只记录ERROR级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
        以及指定<appender>。<logger>仅有一个name属性，
        一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true。
        <logger name="org.springframework.web" level="info"/>
        <logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>
    -->

    <!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
        【logging.level.org.mybatis=debug logging.level.dao=debug】
     -->

    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->

    <!-- 4. 最终的策略 -->
    <!-- 4.1 开发环境:打印控制台-->
    <springProfile name="dev">
        <logger name="com.sdcm.pmp" level="debug"/>
    </springProfile>

    <root level="info">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="DEBUG_FILE" />
        <appender-ref ref="INFO_FILE" />
        <appender-ref ref="WARN_FILE" />
        <appender-ref ref="ERROR_FILE" />
    </root>

    <!-- 4.2 生产环境:输出到文档
    <springProfile name="pro">
        <root level="info">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="DEBUG_FILE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="ERROR_FILE" />
            <appender-ref ref="WARN_FILE" />
        </root>
    </springProfile> -->

</configuration>
<!--<?xml version="1.0" encoding="utf-8" ?>-->
<!--&lt;!&ndash;-->
<!--    scan: true时 配置文件如果发生改变,将会重新加载(默认为true)-->
<!--    scanPeriod: 设置检测配置文件是否有修改的时间间隔(没给时间单位默认为ms;scan=true时,此属性生效;默认为1分钟)-->
<!--    debug: true时 将打印logback内部日志信息,实时查看logback运行状态(默认为false)-->
<!--&ndash;&gt;-->
<!--<configuration scan="true" scanPeriod="60 seconds" debug="false">-->
<!--&lt;!&ndash;    日志根目录   &ndash;&gt;-->
<!--    <property name="LOG_HOME" value="logs"/>-->
<!--&lt;!&ndash;    日志文件名称  &ndash;&gt;-->
<!--    <property name="appName" value="spring-boot-learn-logging"/>-->
<!--&lt;!&ndash;    控制台输出   &ndash;&gt;-->
<!--    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">-->
<!--&lt;!&ndash;-->
<!--    输出格式:-->
<!--        %d          时间日期-->
<!--        %thread     线程名-->
<!--        %-5level    日志级别(左对齐 5个字符长)-->
<!--        %logger{50} logger名长度最长50字符,否则按照句点分割-->
<!--        %msg        日志信息-->
<!--        %n          换行符-->
<!--&ndash;&gt;-->
<!--        <layout class="ch.qos.logback.classic.PatternLayout">-->
<!--            &lt;!&ndash;开发环境 日志输出&ndash;&gt;-->
<!--            <springProfile name="dev">-->
<!--                <pattern>时间:%d{yyyy-MM-dd HH:mm:ss.SSS} 线程:%thread 等级:%-5level 日志对象:%-60logger{50} -&#45;&#45;讯息:%msg%n</pattern>-->
<!--            </springProfile>-->
<!--            &lt;!&ndash;测试环境 日志输出&ndash;&gt;-->
<!--            <springProfile name="test">-->
<!--                <pattern>Time:%d{HH:mm:ss} Thread:%thread Level:%-5level Logger:%logger{50} -&#45;&#45;Inf:%msg%n</pattern>-->
<!--            </springProfile>-->
<!--            &lt;!&ndash;生产环境 日志输出&ndash;&gt;-->
<!--            <springProfile name="prod">-->
<!--                <pattern>%d{yyyy-MM-dd HH:mm:ss}[%thread] %-5level -&#45;&#45;%logger{50}:%msg%n</pattern>-->
<!--            </springProfile>-->
<!--        </layout>-->
<!--    </appender>-->

<!--&lt;!&ndash;-->
<!--    滚动记录文件:-->
<!--        先将日志记录到指定文件,当符合某个要求时,再将日志记录到其他文件-->
<!--&ndash;&gt;-->
<!--    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--&lt;!&ndash;        指定文件名称  &ndash;&gt;-->
<!--        <file>${LOG_HOME}/${appName}.log</file>-->
<!--&lt;!&ndash;-->
<!--    当发生滚动时,决定 RollingFileAppender 的行为(涉及文件移动和重命名)-->
<!--    TimeBasedRollingPolicy:(最常见)根据时间制定滚动策略(既负责滚动也负责发出滚动)-->
<!--&ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--&lt;!&ndash;-->
<!--    滚动时产生的文件的存放位置以及文件名称-->
<!--    %{yyyy-MM-dd} : 按天进行日志滚动-->
<!--    %i: 当文件大小超过 maxFileSize 时, 按照 i 进行文件滚动-->
<!--&ndash;&gt;-->
<!--            <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>-->
<!--&lt;!&ndash;-->
<!--    可选:-->
<!--        控制保留的归档文件的最大数量,超出数量就删除旧文件.-->
<!--        (假设每天滚动;maxHistory=365 即只保存最近365天的文件,删除之前的旧文件)-->
<!--        [注: 删除旧文件时,为归档而创建的目录也将删除]-->
<!--&ndash;&gt;-->
<!--            <MaxHistory>30</MaxHistory>-->
<!--&lt;!&ndash;-->
<!--    当日志文件文件超过 maxFileSize 指定大小时,根据 fileNamePattern 中提到的 %i 进行文件滚动-->
<!--    (注: 配置 SizeBasedTriggeringPolicy 无法满足按文件大小进行滚动,-->
<!--        必须配置 timeBasedFileNamingAndTriggeringPolicy)-->
<!--&ndash;&gt;-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>100MB</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->
<!--        </rollingPolicy>-->
<!--&lt;!&ndash;    日志输出格式: &ndash;&gt;-->
<!--        <layout class="ch.qos.logback.classic.PatternLayout">-->
<!--            <pattern>时间:%d{yyyy-MM-dd HH:mm:ss, SSS} 线程:%thread 日志等级:%-5level -&#45;&#45; 日志对象:%-60logger{50} : %line -&#45;&#45; 讯息:%msg%n</pattern>-->
<!--        </layout>-->
<!--    </appender>-->

<!--&lt;!&ndash;-->
<!--    logger 主要用于存放日志对象, 也可以定义日志类型 级别-->
<!--        name: 匹配的logger类型前缀(包的前半部分)-->
<!--        level: 记录的日志级别 (TRACE < DEBUG < INFO < WARN < ERROR)-->
<!--        additivity: 作用 children-logger 是否使用 rootLogger 配置的 appender 进行是输出-->
<!--            false: 只使用当前 logger 的 appender-ref-->
<!--            true: 当前 logger 的 appender-ref 和 rootLogger 的 appender-ref 都有效-->
<!--            (即 是否使用父级 logger 的 appender)-->
<!--&ndash;&gt;-->

<!--    <logger name="com.learnboot.springbootlearn" level="debug"/>-->
<!--&lt;!&ndash;    SpringFramework logger  &ndash;&gt;-->
<!--    <logger name="org.springframework" level="debug" additivity="false"/>-->

<!--&lt;!&ndash;-->
<!--    root 和 logger 为父子关系,没有指定定义配置则默认为 root,任何一个类都会和 一个 logger 对应-->
<!--    (不是root就是logger)[关键:找到logger 再判断logger的appender和level]-->
<!--    (上面定义的logger形式简单,其实可以和root定义的形式一样)-->
<!--&ndash;&gt;-->
<!--    <root level="info">-->
<!--        <appender-ref ref="stdout"/>-->
<!--        <appender-ref ref="appLogAppender"/>-->
<!--    </root>-->
<!--</configuration>-->